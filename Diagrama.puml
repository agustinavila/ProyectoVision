'Generador de UML utilizando plantUML

@startuml proyectoVision

abstract class Feeder{

	Mat frame
	getFrame()
	registrarObservador()
	removerObservador()
	actualizarObservadores()
}

class FrameLogger{
	en realidad podria ser un metodo del Feeder
	Mat frame
	string nombreArchivo
	actualizar()
	guardarFrame()
}
Feeder -> FrameLogger

Feeder->ExtractorLandmarks

abstract class ExtractorLandmarks{
	'debe definir todos los datos necesarios
	'y los metodos para extraer y registrar los datos

	vector<vector<float>> landmarks
	Mat frame
	actualizar()
	getLandmarks()
}

ExtractorLandmarks->NormalizadorLandmarks

class NormalizadorLandmarks{
	vector<vector<float>> landmarksOrig
	vector<vector<float>> landmarksNorm
	float angulo
	float escala
	float ancla
}

class AnalizadorSimetria{
array simetrias
calcularSimetria()
}

NormalizadorLandmarks -> AnalizadorSimetria

@enduml

@startuml structs
class datoBase <<struct>>{
	'primer boceto de la estructura basica de cada frame
	'para hacer registro de los datos?

	Mat frame
	int numeroFrame
	string nombreArchivo
	double timestamp
	vector<vector<float>> features
	float ancla
	float angulo
	float escala
}
@enduml

@startuml feeder

abstract class Feeder{
	Mat frame
	getFrame()
	registrarObservador()
	removerObservador()
	actualizarObservadores()
}

class VideoFeeder{
	Mat frame
	string nombreArchivo
	abrirArchivo()
}
Feeder<|--VideoFeeder

class WebcamFeeder{
}
Feeder<|--WebcamFeeder

class KinectFeeder{
	'"tipoimagen" deberia servir para registrar RGB, IR o profundidad
	Mat frame
	array tipoimagen
	abrirArchivo()
}
Feeder<|--KinectFeeder
@enduml

@startuml extractorLandmarks
abstract class ExtractorLandmarks{
	'debe definir todos los datos necesarios
	'y los metodos para extraer y registrar los datos

	vector<vector<float>> landmarks
	Mat frame
	actualizar()
	getLandmarks()
}
note left of extractorLandmarks
Debe proveerse un archivo 
de entrenamiento para el extractor
end note

class ExtractorLandmarksOpenCV{
implementacion del extractor con openCV
}
ExtractorLandmarks<|-- ExtractorLandmarksOpenCV
ExtractorLandmarks<|-- ExtractorLandmarksDlib
class ExtractorLandmarksDlib{
implementacion del extractor con dlib
}
@enduml