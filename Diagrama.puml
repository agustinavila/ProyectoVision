'Generador de UML utilizando plantUML

@startuml proyectoVision

abstract class Feeder{
	Mat frame
	getFrame()
}

class FrameLogger{
	Mat frame
	string nombre
	log()
}
Feeder -> FrameLogger

Feeder->ExtractorLandmarks

abstract class ExtractorLandmarks{
	'debe definir todos los datos necesarios
	'y los metodos para extraer y registrar los datos

	vector<Point2f> landmarks
	vector<Point2f> getLandmarks(Mat)
}

ExtractorLandmarks->AnalizadorLandmarks

class AnalizadorLandmarks{
	vector<Point2f> landmarks
	vector<Point2f> landmarksNorm
	float rotacion
	float asimetria
	calcularAngulo(Point2f,Point2f)
	normalizarLandmarks()
	float calcularAsimetria()
}
@enduml

@startuml structs
class datoBase <<struct>>{
	'primer boceto de la estructura basica de cada frame
	'para hacer registro de los datos?

	Mat frame
	int numeroFrame
	string nombreArchivo
	double timestamp
	vector<vector<float>> features
	float ancla
	float angulo
	float escala
}
@enduml

@startuml feeder

abstract class Feeder{
	Mat frame
	Mat getFrame()
}

class VideoFeeder{
	Mat frame
	string nombreArchivo
	VideoCapture cap
	Mat getFrame();
}
Feeder<|--VideoFeeder

class WebcamFeeder{
	Mat frame
	int idx
	VideoCapture cap
	Mat getFrame();
}
Feeder<|--WebcamFeeder

class KinectFeeder{
	'"tipoimagen" deberia servir para registrar RGB, IR o profundidad
	Mat frame
	Freenect2 freenect2
	Mat getFrame()
}
Feeder<|--KinectFeeder
@enduml

@startuml extractorLandmarks
abstract class ExtractorLandmarks{
	'debe definir todos los datos necesarios
	'y los metodos para extraer y registrar los datos
	vector<Point2f> landmarks
	vector<Point2f> getLandmarks(Mat)
}
note left of ExtractorLandmarks
Debe proveerse un archivo 
de entrenamiento para el extractor
Por el momento esta hardcodeado
end note

class ExtractorLandmarksOpenCV{
Mat Gray
Ptr<face::Facemark> facemark
CascadeClassifier faceDetector
vector<Point2f> landmarks
vector<Point2f> getLandmarks(Mat)
}
ExtractorLandmarks<|-- ExtractorLandmarksOpenCV

class ExtractorLandmarksDlib{
frontal_face_detector detector
shape_predictor pose_model
vector<Point2f> landmarks
vector<Point2f> getLandmarks(Mat)
}
ExtractorLandmarks<|-- ExtractorLandmarksDlib

@enduml